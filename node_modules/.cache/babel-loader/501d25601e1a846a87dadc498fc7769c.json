{"remainingRequest":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js!/Users/luke/Documents/VUE/bt-starter/node_modules/eslint-loader/index.js??ref--13-0!/Users/luke/Documents/VUE/bt-starter/src/filters/formatCurrency.js","dependencies":[{"path":"/Users/luke/Documents/VUE/bt-starter/src/filters/formatCurrency.js","mtime":1603765818000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnOwpWdWUuZmlsdGVyKCdmb3JtYXRDdXJyZW5jeScsIGZvcm1hdEN1cnJlbmN5KTsKLyoqCiAqIFJldHVybnMgdGhlIGN1cnJlbmN5IGZvcm1hdHRlZCBhY2NvcmRpbmdseQogKi8KCmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDdXJyZW5jeSh2YWx1ZSwgY3VycmVuY3kpIHsKICBjdXJyZW5jeSA9IGN1cnJlbmN5IHx8IHN0b3JlLnN0YXRlLmFwcC5jdXJyZW5jeTsKICByZXR1cm4gZm9ybWF0UHJpY2UodmFsdWUsIGN1cnJlbmN5KTsKfQovKioKKiBSZXR1cm5zIHRoZSBwcmljZSBwYXNzZWQgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3lzdGVtIGNvbmZpZ3VyYXRpb25zIGZvciB0aGUgY3VycmVuY3kKKgoqIEBwYXJhbSBwcmljZQoqIEByZXR1cm5zIHsqfQoqLwoKZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFByaWNlKHByaWNlLCBjdXJyZW5jeSkgewogIHRyeSB7CiAgICB2YXIgbnVtYmVyRm9ybWF0dGVkID0gbnVtYmVyRm9ybWF0KHByaWNlLCBjdXJyZW5jeS5kZWNpbWFsRGlnaXRzLCBjdXJyZW5jeS5kZWNpbWFsU2VwYXJhdG9yLCBjdXJyZW5jeS50aG91c2FuZHNTZXBhcmF0b3IpOwoKICAgIGlmIChjdXJyZW5jeS5jdXJyZW5jeVN5bWJvbCkgewogICAgICB2YXIgcHJpY2VTZXBhcmF0b3IgPSBjdXJyZW5jeS5jdXJyZW5jeVN5bWJvbE51bWJlck9mU3BhY2VzID4gMCA/ICcgJy5yZXBlYXQoY3VycmVuY3kuY3VycmVuY3lTeW1ib2xOdW1iZXJPZlNwYWNlcykgOiAnJzsKICAgICAgdmFyIHByaWNlUGFydHMgPSBbbnVtYmVyRm9ybWF0dGVkLCBwcmljZVNlcGFyYXRvciwgY3VycmVuY3kuY3VycmVuY3lTeW1ib2xdOwoKICAgICAgaWYgKGN1cnJlbmN5LmN1cnJlbmN5U3ltYm9sUG9zaXRpb24gPT09ICdsZWZ0JykgewogICAgICAgIHByaWNlUGFydHMgPSBwcmljZVBhcnRzLnJldmVyc2UoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHByaWNlUGFydHMuam9pbignJyk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVtYmVyRm9ybWF0dGVkOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiBwcmljZTsKICB9Cn0KLyoqCiAgICogSGVscGVyIG1ldGhvZCB0byBmb3JtYXQgYSBudW1iZXIgZ2l2ZW4gYSBmZXcgY29uZmlndXJhdGlvbnMgc3VjaCBhcyB0aGUgc2VwYXJhdGlvbgogICAqIGJldHdlZW4gdGhvdXNhbmRzIGFuZCBkZWNpbWFscwogICAqCiAgICogQHBhcmFtIG51bWJlcgogICAqIEBwYXJhbSBkZWNpbWFscwogICAqIEBwYXJhbSBkZWNfcG9pbnQKICAgKiBAcGFyYW0gdGhvdXNhbmRzX3NlcAogICAqIEByZXR1cm5zIHsqfQogICAqLwoKZXhwb3J0IGZ1bmN0aW9uIG51bWJlckZvcm1hdChudW1iZXIsIGRlY2ltYWxzLCBkZWNfcG9pbnQsIHRob3VzYW5kc19zZXApIHsKICBpZiAoaXNOYU4obnVtYmVyKSkgewogICAgcmV0dXJuIG51bWJlcjsKICB9CgogIHZhciBuZWdhdGl2ZSA9IG51bWJlciA8IDA7CiAgaWYgKG5lZ2F0aXZlKSBudW1iZXIgPSBudW1iZXIgKiAtMTsKICB2YXIgc3RyID0gbnVtYmVyLnRvRml4ZWQoZGVjaW1hbHMgPyBkZWNpbWFscyA6IDApLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTsKICB2YXIgcGFydHMgPSBbXTsKCiAgZm9yICh2YXIgaSA9IHN0clswXS5sZW5ndGg7IGkgPiAwOyBpIC09IDMpIHsKICAgIHBhcnRzLnVuc2hpZnQoc3RyWzBdLnN1YnN0cmluZyhNYXRoLm1heCgwLCBpIC0gMyksIGkpKTsKICB9CgogIHN0clswXSA9IHBhcnRzLmpvaW4odGhvdXNhbmRzX3NlcCA/IHRob3VzYW5kc19zZXAgOiAnLCcpOwogIHJldHVybiAobmVnYXRpdmUgPyAnLScgOiAnJykgKyBzdHIuam9pbihkZWNfcG9pbnQgPyBkZWNfcG9pbnQgOiAnLicpOwp9CmV4cG9ydCBkZWZhdWx0IHsKICBmb3JtYXRQcmljZTogZm9ybWF0UHJpY2UsCiAgbnVtYmVyRm9ybWF0OiBudW1iZXJGb3JtYXQKfTs="},{"version":3,"sources":["/Users/luke/Documents/VUE/bt-starter/src/filters/formatCurrency.js"],"names":["Vue","store","filter","formatCurrency","value","currency","state","app","formatPrice","price","numberFormatted","numberFormat","decimalDigits","decimalSeparator","thousandsSeparator","currencySymbol","priceSeparator","currencySymbolNumberOfSpaces","repeat","priceParts","currencySymbolPosition","reverse","join","e","number","decimals","dec_point","thousands_sep","isNaN","negative","str","toFixed","toString","split","parts","i","length","unshift","substring","Math","max"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEAD,GAAG,CAACE,MAAJ,CAAW,gBAAX,EAA6BC,cAA7B;AAEA;AACA;AACA;;AACA,OAAO,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,QAA/B,EAAyC;AAC9CA,EAAAA,QAAQ,GAAGA,QAAQ,IAAIJ,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgBF,QAAvC;AAEA,SAAOG,WAAW,CAACJ,KAAD,EAAQC,QAAR,CAAlB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAqBC,KAArB,EAA4BJ,QAA5B,EAAsC;AAC3C,MAAI;AACF,QAAMK,eAAe,GAAGC,YAAY,CAClCF,KADkC,EAElCJ,QAAQ,CAACO,aAFyB,EAGlCP,QAAQ,CAACQ,gBAHyB,EAIlCR,QAAQ,CAACS,kBAJyB,CAApC;;AAOA,QAAIT,QAAQ,CAACU,cAAb,EAA6B;AAC3B,UAAMC,cAAc,GAAGX,QAAQ,CAACY,4BAAT,GAAwC,CAAxC,GACnB,IAAIC,MAAJ,CAAWb,QAAQ,CAACY,4BAApB,CADmB,GAEnB,EAFJ;AAGA,UAAIE,UAAU,GAAG,CAACT,eAAD,EAAkBM,cAAlB,EAAkCX,QAAQ,CAACU,cAA3C,CAAjB;;AAEA,UAAIV,QAAQ,CAACe,sBAAT,KAAoC,MAAxC,EAAgD;AAC9CD,QAAAA,UAAU,GAAGA,UAAU,CAACE,OAAX,EAAb;AACD;;AAED,aAAOF,UAAU,CAACG,IAAX,CAAgB,EAAhB,CAAP;AACD,KAXD,MAWO;AACL,aAAOZ,eAAP;AACD;AACF,GAtBD,CAsBE,OAAOa,CAAP,EAAU;AACV,WAAOd,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,YAAT,CAAsBa,MAAtB,EAA8BC,QAA9B,EAAwCC,SAAxC,EAAmDC,aAAnD,EAAkE;AACvE,MAAIC,KAAK,CAACJ,MAAD,CAAT,EAAmB;AACjB,WAAOA,MAAP;AACD;;AAED,MAAMK,QAAQ,GAAGL,MAAM,GAAG,CAA1B;AAEA,MAAIK,QAAJ,EAAcL,MAAM,GAAGA,MAAM,GAAG,CAAC,CAAnB;AAEd,MAAMM,GAAG,GAAGN,MAAM,CAACO,OAAP,CAAeN,QAAQ,GAAGA,QAAH,GAAc,CAArC,EAAwCO,QAAxC,GAAmDC,KAAnD,CAAyD,GAAzD,CAAZ;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOM,MAApB,EAA4BD,CAAC,GAAG,CAAhC,EAAmCA,CAAC,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,KAAK,CAACG,OAAN,CAAcP,GAAG,CAAC,CAAD,CAAH,CAAOQ,SAAP,CAAiBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,CAAC,GAAG,CAAhB,CAAjB,EAAqCA,CAArC,CAAd;AACD;;AAEDL,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASI,KAAK,CAACZ,IAAN,CAAWK,aAAa,GAAGA,aAAH,GAAmB,GAA3C,CAAT;AAEA,SAAO,CAACE,QAAQ,GAAG,GAAH,GAAS,EAAlB,IAAwBC,GAAG,CAACR,IAAJ,CAASI,SAAS,GAAGA,SAAH,GAAe,GAAjC,CAA/B;AACD;AAED,eAAe;AACblB,EAAAA,WAAW,EAAXA,WADa;AAEbG,EAAAA,YAAY,EAAZA;AAFa,CAAf","sourcesContent":["import Vue from 'vue'\nimport store from '../store'\n\nVue.filter('formatCurrency', formatCurrency)\n\n/**\n * Returns the currency formatted accordingly\n */\nexport function formatCurrency(value, currency) {\n  currency = currency || store.state.app.currency\n\n  return formatPrice(value, currency)\n}\n\n/**\n* Returns the price passed formatted according to the system configurations for the currency\n*\n* @param price\n* @returns {*}\n*/\nexport function formatPrice(price, currency) {\n  try {\n    const numberFormatted = numberFormat(\n      price,\n      currency.decimalDigits,\n      currency.decimalSeparator,\n      currency.thousandsSeparator\n    )\n\n    if (currency.currencySymbol) {\n      const priceSeparator = currency.currencySymbolNumberOfSpaces > 0\n        ? ' '.repeat(currency.currencySymbolNumberOfSpaces)\n        : ''\n      let priceParts = [numberFormatted, priceSeparator, currency.currencySymbol]\n\n      if (currency.currencySymbolPosition === 'left') {\n        priceParts = priceParts.reverse()\n      }\n\n      return priceParts.join('')\n    } else {\n      return numberFormatted\n    }\n  } catch (e) {\n    return price\n  }\n}\n\n/**\n   * Helper method to format a number given a few configurations such as the separation\n   * between thousands and decimals\n   *\n   * @param number\n   * @param decimals\n   * @param dec_point\n   * @param thousands_sep\n   * @returns {*}\n   */\nexport function numberFormat(number, decimals, dec_point, thousands_sep) {\n  if (isNaN(number)) {\n    return number\n  }\n\n  const negative = number < 0\n\n  if (negative) number = number * -1\n\n  const str = number.toFixed(decimals ? decimals : 0).toString().split('.')\n  const parts = []\n\n  for (let i = str[0].length; i > 0; i -= 3) {\n    parts.unshift(str[0].substring(Math.max(0, i - 3), i))\n  }\n\n  str[0] = parts.join(thousands_sep ? thousands_sep : ',')\n\n  return (negative ? '-' : '') + str.join(dec_point ? dec_point : '.')\n}\n\nexport default {\n  formatPrice,\n  numberFormat\n}\n"]}]}
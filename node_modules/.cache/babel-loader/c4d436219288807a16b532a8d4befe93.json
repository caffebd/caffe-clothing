{"remainingRequest":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js!/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js!/Users/luke/Documents/VUE/bt-starter/node_modules/moment/locale/sk.js","dependencies":[{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/moment/locale/sk.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0Iik7Cgp2YXIgX3R5cGVvZiA9IHJlcXVpcmUoIi9Vc2Vycy9sdWtlL0RvY3VtZW50cy9WVUUvYnQtc3RhcnRlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YiKTsKCi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb24KLy8hIGxvY2FsZSA6IFNsb3ZhayBbc2tdCi8vISBhdXRob3IgOiBNYXJ0aW4gTWlua2EgOiBodHRwczovL2dpdGh1Yi5jb20vazJzCi8vISBiYXNlZCBvbiB3b3JrIG9mIHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhCjsKCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7CiAgKHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOiB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOiBmYWN0b3J5KGdsb2JhbC5tb21lbnQpOwp9KSh0aGlzLCBmdW5jdGlvbiAobW9tZW50KSB7CiAgJ3VzZSBzdHJpY3QnOyAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uCgogIHZhciBtb250aHMgPSAnamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSwKICAgICAgbW9udGhzU2hvcnQgPSAnamFuX2ZlYl9tYXJfYXByX23DoWpfasO6bl9qw7psX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyk7CgogIGZ1bmN0aW9uIHBsdXJhbChuKSB7CiAgICByZXR1cm4gbiA+IDEgJiYgbiA8IDU7CiAgfQoKICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7CiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnOwoKICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgIGNhc2UgJ3MnOgogICAgICAgIC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ28KICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdww6FyIHNla8O6bmQnIDogJ3DDoXIgc2VrdW5kYW1pJzsKCiAgICAgIGNhc2UgJ3NzJzoKICAgICAgICAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvCiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2Vrw7puZCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7CiAgICAgICAgfQoKICAgICAgY2FzZSAnbSc6CiAgICAgICAgLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnbwogICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbsO6dGEnIDogaXNGdXR1cmUgPyAnbWluw7p0dScgOiAnbWluw7p0b3UnOwoKICAgICAgY2FzZSAnbW0nOgogICAgICAgIC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ28KICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgewogICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW7DunR5JyA6ICdtaW7DunQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW7DunRhbWknOwogICAgICAgIH0KCiAgICAgIGNhc2UgJ2gnOgogICAgICAgIC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ28KICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91JzsKCiAgICAgIGNhc2UgJ2hoJzoKICAgICAgICAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvCiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2TDrW4nKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7CiAgICAgICAgfQoKICAgICAgY2FzZSAnZCc6CiAgICAgICAgLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnbwogICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RlxYgnIDogJ2TFiG9tJzsKCiAgICAgIGNhc2UgJ2RkJzoKICAgICAgICAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvCiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG5pJyA6ICdkbsOtJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZMWIYW1pJzsKICAgICAgICB9CgogICAgICBjYXNlICdNJzoKICAgICAgICAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvCiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzaWFjJyA6ICdtZXNpYWNvbSc7CgogICAgICBjYXNlICdNTSc6CiAgICAgICAgLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnbwogICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21lc2lhY2UnIDogJ21lc2lhY292Jyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWVzaWFjbWknOwogICAgICAgIH0KCiAgICAgIGNhc2UgJ3knOgogICAgICAgIC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ28KICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdyb2snIDogJ3Jva29tJzsKCiAgICAgIGNhc2UgJ3l5JzoKICAgICAgICAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvCiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAncm9rb3YnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdyb2ttaSc7CiAgICAgICAgfQoKICAgIH0KICB9CgogIHZhciBzayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NrJywgewogICAgbW9udGhzOiBtb250aHMsCiAgICBtb250aHNTaG9ydDogbW9udGhzU2hvcnQsCiAgICB3ZWVrZGF5czogJ25lZGXEvmFfcG9uZGVsb2tfdXRvcm9rX3N0cmVkYV/FoXR2cnRva19waWF0b2tfc29ib3RhJy5zcGxpdCgnXycpLAogICAgd2Vla2RheXNTaG9ydDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSwKICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLAogICAgbG9uZ0RhdGVGb3JtYXQ6IHsKICAgICAgTFQ6ICdIOm1tJywKICAgICAgTFRTOiAnSDptbTpzcycsCiAgICAgIEw6ICdERC5NTS5ZWVlZJywKICAgICAgTEw6ICdELiBNTU1NIFlZWVknLAogICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsCiAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJwogICAgfSwKICAgIGNhbGVuZGFyOiB7CiAgICAgIHNhbWVEYXk6ICdbZG5lcyBvXSBMVCcsCiAgICAgIG5leHREYXk6ICdbemFqdHJhIG9dIExUJywKICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIG5leHRXZWVrKCkgewogICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICByZXR1cm4gJ1t2IG5lZGXEvnUgb10gTFQnOwoKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb10gTFQnOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmV0dXJuICdbdiBzdHJlZHUgb10gTFQnOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmV0dXJuICdbdiBwaWF0b2sgb10gTFQnOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgb10gTFQnOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLAogICAgICBsYXN0V2VlazogZnVuY3Rpb24gbGFzdFdlZWsoKSB7CiAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogbmVkZcS+dSBvXSBMVCc7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHN0cmVkdSBvXSBMVCc7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHNvYm90dSBvXSBMVCc7CiAgICAgICAgfQogICAgICB9LAogICAgICBzYW1lRWxzZTogJ0wnCiAgICB9LAogICAgcmVsYXRpdmVUaW1lOiB7CiAgICAgIGZ1dHVyZTogJ3phICVzJywKICAgICAgcGFzdDogJ3ByZWQgJXMnLAogICAgICBzOiB0cmFuc2xhdGUsCiAgICAgIHNzOiB0cmFuc2xhdGUsCiAgICAgIG06IHRyYW5zbGF0ZSwKICAgICAgbW06IHRyYW5zbGF0ZSwKICAgICAgaDogdHJhbnNsYXRlLAogICAgICBoaDogdHJhbnNsYXRlLAogICAgICBkOiB0cmFuc2xhdGUsCiAgICAgIGRkOiB0cmFuc2xhdGUsCiAgICAgIE06IHRyYW5zbGF0ZSwKICAgICAgTU06IHRyYW5zbGF0ZSwKICAgICAgeTogdHJhbnNsYXRlLAogICAgICB5eTogdHJhbnNsYXRlCiAgICB9LAogICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xkezEsMn1cLi8sCiAgICBvcmRpbmFsOiAnJWQuJywKICAgIHdlZWs6IHsKICAgICAgZG93OiAxLAogICAgICAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay4KICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci4KCiAgICB9CiAgfSk7CiAgcmV0dXJuIHNrOwp9KTs="},null]}
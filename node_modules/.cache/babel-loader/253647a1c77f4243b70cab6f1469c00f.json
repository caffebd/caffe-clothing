{"remainingRequest":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js!/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js!/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/luke/Documents/VUE/bt-starter/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/luke/Documents/VUE/bt-starter/src/pages/dashboard/DashboardPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/luke/Documents/VUE/bt-starter/src/pages/dashboard/DashboardPage.vue","mtime":1606635182004},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
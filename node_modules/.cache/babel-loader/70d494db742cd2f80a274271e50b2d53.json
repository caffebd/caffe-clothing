{"remainingRequest":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js!/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js!/Users/luke/Documents/VUE/bt-starter/node_modules/vuetify/lib/components/VWindow/VWindow.js","dependencies":[{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/vuetify/lib/components/VWindow/VWindow.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
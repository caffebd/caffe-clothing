{"remainingRequest":"/Users/luke/Documents/VUE/bt-starter/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/luke/Documents/VUE/bt-starter/src/pages/dashboard/MapsPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/luke/Documents/VUE/bt-starter/src/pages/dashboard/MapsPage.vue","mtime":1606637024417},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luke/Documents/VUE/bt-starter/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIERFTU8gQ2FyZHMgZm9yIGRhc2hib2FyZAovL2ltcG9ydCBTYWxlc0NhcmQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kYXNoYm9hcmQvSW5ib3hDYXJkJwppbXBvcnQgTWFwQ2FyZCBmcm9tICcuLi8uLi9wYWdlcy91aS9tYXBzL19leGFtcGxlcy9nb29nbGUtbWFwcy9zaW1wbGUvaW5mby13aW5kb3cnCmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vbWFpbicKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnCmNvbnN0IHF1ZXJ5ID0gZGIuY29sbGVjdGlvbigndXNlcnMnKQpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgTWFwQ2FyZAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRpbWVtaW46IDAsCiAgICAgIHRpbWVtYXg6IDI0LAogICAgICB0aW1lcmFuZ2U6IFswLCAyNF0sCiAgICAgIG1heDo5OSwKICAgICAgbWluOjAsCiAgICAgIHJhbmdlOlswLDk5XSwKICAgICAgZm9ybTogZmFsc2UsCiAgICAgIG1vZGU6ZmFsc2UsCiAgICAgIGNoYXJ0VHlwZTonR3JvdXAnLAogICAgICBsb2FkaW5nSW50ZXJ2YWw6IG51bGwsCiAgICAgIGVtYWlsOiAnJywKICAgICAgZm91bmRVc2VyOiBudWxsLAogICAgICBpc0xvYWRpbmcxOiB0cnVlLAogICAgICBmcm9tRGF0ZU1lbnU6IGZhbHNlLAogICAgICBmcm9tRGF0ZVZhbDogbnVsbCwKICAgICAgZGF0ZXM6W10sCiAgICAgIG1vZGFsOiBmYWxzZSwKICAgICAgbWluRGF0ZTogJzIwMTktMDctMDQnLAogICAgICBtYXhEYXRlOiAnMjAzMC0wOC0zMCcsCiAgICAgIGFsbFNlYXJjaERhdGVzOiBbXSwKICAgICAgYWxsUmVzdWx0czogW10sCiAgICAgIGNoYWxsZW5nZUxpc3Q6W10sCiAgICAgIGNoYWxsZW5nZVNNU0xpc3Q6W10sCiAgICAgIHNlY3JldExpc3Q6W10sCiAgICAgIHNlY3JldFNNU0xpc3Q6W10sCiAgICAgIHRpbWVyTGlzdDpbXSwKICAgICAgdGltZXJTTVNMaXN0OltdLAogICAgICB1c2VyU01TTGlzdDpbXSwKICAgICAgem9uZUxpc3Q6W10sCiAgICAgIHpvbmVTTVNMaXN0OltdLAogICAgICBhbGFybUxpc3Q6W10sCgogICAgICBzZW5kTWFwRGF0YTogW10sCgogICAgICBzZWxlY3RDaGFsbGVuZ2U6IHRydWUsCiAgICAgIHNlbGVjdENoYWxsZW5nZVNNUzp0cnVlLAogICAgICBzZWxlY3RTZWNyZXQ6dHJ1ZSwKICAgICAgc2VsZWN0U2VjcmV0U01TOmZhbHNlLAogICAgICBzZWxlY3RUaW1lcjp0cnVlLAogICAgICBzZWxlY3RUaW1lclNNUzp0cnVlLAogICAgICBzZWxlY3Rab25lOmZhbHNlLAogICAgICBzZWxlY3Rab25lU01TOmZhbHNlLAogICAgICBzZWxlY3RVc2VyU01TOnRydWUsCiAgICAgIHNlbGVjdEFsYXJtOnRydWUsCgogICAgICBncm91cENoYWxsZW5nZUNvdW50OjAsCiAgICAgIGdyb3VwQ2hhbGxlbmdlU01TQ291bnQ6MCwKICAgICAgZ3JvdXBTZWNyZXRDb3VudDowLAogICAgICBncm91cFNlY3JldFNNU0NvdW50OjAsCiAgICAgIGdyb3VwVGltZXJDb3VudDowLAogICAgICBncm91cFRpbWVyU01TQ291bnQ6MCwKICAgICAgZ3JvdXBab25lQ291bnQ6MCwKICAgICAgZ3JvdXBab25lU01TQ291bnQ6MCwKICAgICAgZ3JvdXBVc2VyU01TQ291bnQ6MCwKICAgICAgZ3JvdXBBbGFybUNvdW50OjAsCgogICAgICBjaGFsbGVuZ2VDaGVjazpmYWxzZSwKICAgICAgY2hhbGxlbmdlU01TQ2hlY2s6ZmFsc2UsCiAgICAgIHNlY3JldENoZWNrOmZhbHNlLAogICAgICBzZWNyZXRTTVNDaGVjazpmYWxzZSwKICAgICAgdGltZXJDaGVjazpmYWxzZSwKICAgICAgdGltZXJTTVNDaGVjazpmYWxzZSwKICAgICAgem9uZUNoZWNrOmZhbHNlLAogICAgICB6b25lU01TQ2hlY2s6ZmFsc2UsCiAgICAgIHVzZXJTTVNDaGVjazpmYWxzZSwKICAgICAgYWxhcm1DaGVjazpmYWxzZSwKCiAgICAgIGxvd2VyQWdlOjEsCiAgICAgIHVwcGVyQWdlOjk5LAoKICAgICAgbG93ZXJUaW1lOjAsCiAgICAgIHVwcGVyVGltZToyNCwKCiAgICAgIGFjdGl2ZUNoZWNrQm94ZXM6W10sCgogICAgICBtYXBJY29uczp7CiAgICAgICAgInRpbWVyIjoiaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvNi84L2YvYy8xMTk0OTg4OTk3MTcwNjg0NzExNWNsb2NrMDEuc3ZnLnRodW1iLnBuZyIsCiAgICAgICAgInRpbWVyLXNtcyI6Imh0dHA6Ly93d3cuY2xrZXIuY29tL2NsaXBhcnRzLzYvOC9mL2MvMTE5NDk4ODk5NzE3MDY4NDcxMTVjbG9jazAxLnN2Zy50aHVtYi5wbmciLAogICAgICAgICJjaGFsbGVuZ2UiOiJodHRwOi8vd3d3LmNsa2VyLmNvbS9jbGlwYXJ0cy8zLzcvMS8zLzExOTQ5ODQ5MTA3ODU0NzQzNThzdG9wX3NpZ25fbWlndWVsX3NfbmNoZXpfLnN2Zy50aHVtYi5wbmciLAogICAgICAgICJjaGFsbGVuZ2Utc21zIjoiaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvMy83LzEvMy8xMTk0OTg0OTEwNzg1NDc0MzU4c3RvcF9zaWduX21pZ3VlbF9zX25jaGV6Xy5zdmcudGh1bWIucG5nIiwKICAgICAgICAic2VjcmV0IjoiaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvYi8zL2YvNi8xMTk3MTQ4NDU1MTc5NDA0NDQ3NmVhcmx5c3dlcnZlcl9VS19TcGVlZF9DYW1lcmFfU2lnbi5zdmcudGh1bWIucG5nIiwKICAgICAgICAic2VjcmV0LXNtcyI6Imh0dHA6Ly93d3cuY2xrZXIuY29tL2NsaXBhcnRzL2IvMy9mLzYvMTE5NzE0ODQ1NTE3OTQwNDQ0NzZlYXJseXN3ZXJ2ZXJfVUtfU3BlZWRfQ2FtZXJhX1NpZ24uc3ZnLnRodW1iLnBuZyIsCiAgICAgICAgInpvbmUiOiJodHRwOi8vd3d3LmNsa2VyLmNvbS9jbGlwYXJ0cy8yLzkvYi84LzExOTQ5ODQ3NzU3NjAwNzUzMzRidXR0b24tZ3JlZW5fYmVuamlfcGFya18wMS5zdmcudGh1bWIucG5nIiwKICAgICAgICAiem9uZXMtc21zIjoiaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvMi85L2IvOC8xMTk0OTg0Nzc1NzYwMDc1MzM0YnV0dG9uLWdyZWVuX2JlbmppX3BhcmtfMDEuc3ZnLnRodW1iLnBuZyIsCiAgICAgICAgImFsYXJtIjoiaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvaC96L2wvdS9sL3Mvc3BlYWtlci12b2x1bWUtMy10aC5wbmciLAogICAgICAgICJ1c2VyLXNtcyI6Imh0dHA6Ly93d3cuY2xrZXIuY29tL2NsaXBhcnRzLzEvVC9FL0UvdC9DL3Ntcy10ZXh0LXRoLnBuZyIKICAgICB9CgoKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICBsZXQgY291bnQgPSAwCgogICAgLy8gREVNTyBkZWxheSBmb3IgbG9hZGluZyBncmFwaGljcwogICAgdGhpcy5sb2FkaW5nSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIHRoaXNbYGlzTG9hZGluZyR7Y291bnQrK31gXSA9IGZhbHNlCiAgICAgIGlmIChjb3VudCA9PT0gNCkgdGhpcy5jbGVhcigpCiAgICB9LCA0MDApCiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgdGhpcy5jbGVhcigpCiAgfSwKICBtZXRob2RzOiB7CiAgICBjbGVhckFsbENyaXRlcmlhKCl7CiAgICAgIHRoaXMuY2hhbGxlbmdlTGlzdCA9IFtdCiAgICAgIHRoaXMuY2hhbGxlbmdlU01TTGlzdCA9IFtdCiAgICAgIHRoaXMuc2VjcmVMaXN0ID0gW10KICAgICAgdGhpcy5zZWNyZVNNU0xpc3QgPSBbXQogICAgICB0aGlzLnRpbWVyTGlzdCA9IFtdCiAgICAgIHRoaXMudGltZXJTTVNMaXN0ID0gW10KICAgICAgdGhpcy51c2VyU01TTGlzdCA9IFtdCiAgICAgIHRoaXMuem9uZUxpc3QgPSBbXQogICAgICB0aGlzLnpvbmVTTVNMaXN0ID0gW10KICAgICAgdGhpcy5hbGFybUxpc3QgPSBbXQogICAgICB0aGlzLnNlbmRNYXBEYXRhID0gW10KCiAgICAgIHRoaXMuY2hhbGxlbmdlQ2hlY2sgPSBmYWxzZQogICAgICB0aGlzLmNoYWxsZW5nZVNNU0NoZWNrID0gZmFsc2UKICAgICAgdGhpcy5zZWNyZXRDaGVjayA9IGZhbHNlCiAgICAgIHRoaXMuc2VjcmV0U01TQ2hlY2sgPSBmYWxzZQogICAgICB0aGlzLnRpbWVyQ2hlY2sgPSBmYWxzZQogICAgICB0aGlzLnRpbWVyU01TQ2hlY2sgPSBmYWxzZQogICAgICB0aGlzLnpvbmVDaGVjayA9IGZhbHNlCiAgICAgIHRoaXMuem9uZVNNU0NoZWNrID0gZmFsc2UKICAgICAgdGhpcy51c2VyU01TQ2hlY2sgPSBmYWxzZQogICAgICB0aGlzLmFsYXJtQ2hlY2sgPSBmYWxzZQoKICAgICAgdGhpcy5hY3RpdmVDaGVja0JveGVzPVtdCgogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgncXVlcnl1c2VyL3NldE5ld01hcERhdGEnLE9iamVjdC52YWx1ZXModGhpcy5zZW5kTWFwRGF0YSkpCiAgICB9LAogICAgdG9nZ2xlQ2hhcnRUeXBlKGV2ZW50KXsKICAgICAgY29uc29sZS5sb2coZXZlbnQpCiAgICAgIHRoaXMuY2xlYXJBbGxDcml0ZXJpYSgpCiAgICAgIGlmIChldmVudD09dHJ1ZSl7CiAgICAgICAgdGhpcy5jaGFydFR5cGU9J0luZGl2aWR1YWwnCiAgICAgIH1lbHNlewogICAgICAgIHRoaXMuY2hhcnRUeXBlPSdHcm91cCcKICAgICAgfQogICAgfSwKICAgIGNsZWFyKCkgewogICAgICBjbGVhckludGVydmFsKHRoaXMubG9hZGluZ0ludGVydmFsKQogICAgfSwKICAgIGNoZWNrQm94VGVzdCh0eXBlKXsKICAgICAgY29uc29sZS5sb2codHlwZSsnICcrdGhpcy5jaGFsbGVuZ2VDaGVjaykKICAgICAgaWYgKHRoaXMuYWN0aXZlQ2hlY2tCb3hlcy5pbmNsdWRlcyh0eXBlKSl7CiAgICAgICAgdGhpcy5hY3RpdmVDaGVja0JveGVzLnNwbGljZSh0aGlzLmFjdGl2ZUNoZWNrQm94ZXMuaW5kZXhPZih0eXBlKSwgMSk7CiAgICAgIH1lbHNlewogICAgICAgIHRoaXMuYWN0aXZlQ2hlY2tCb3hlcy5wdXNoKHR5cGUpCiAgICAgIH0KICAgICAgY29uc29sZS5sb2cgKHRoaXMuYWN0aXZlQ2hlY2tCb3hlcykKCiAgICBpZiAodGhpcy5jaGFydFR5cGU9PSdHcm91cCcpewogICAgICB0aGlzLmdldEdyb3VwRGF0YSh0eXBlLCBmYWxzZSkKICAgIH1lbHNlewogICAgICB0aGlzLnNlbGVjdENoYXJ0Q29sdW1ucygpCiAgICB9CgogICAgfSwKICAgIGRhdGVDaGFuZ2VkQ2hlY2tlcigpewoKICAgICAgdGhpcy5zZW5kTWFwRGF0YT1bXQoKICAgIGlmICh0aGlzLmNoYXJ0VHlwZT09J0dyb3VwJyl7CgogICAgICBmb3IgKHZhciBkPTA7IGQ8dGhpcy5hY3RpdmVDaGVja0JveGVzLmxlbmd0aDsgZCsrKXsKICAgICAgICB0aGlzLmdldEdyb3VwRGF0YSh0aGlzLmFjdGl2ZUNoZWNrQm94ZXNbZF0sIHRydWUpCiAgICAgIH0KCiAgICB9ZWxzZXsKICAgICAgdGhpcy5zZWFyY2hVc2Vyc0J5RW1haWwoKQogICAgfQogICAgfSwKICAgIGNoYW5nZURhdGEoKSB7CgogICAgaWYgKHRoaXMuY2hhcnRUeXBlPT0nR3JvdXAnKXsKICAgICAgIHRoaXMuc2VsZWN0Q2hhbGxlbmdlU01TID0gZmFsc2UKICAgICAgIHRoaXMuc2VsZWN0Q2hhcnRDb2x1bW5zKCkKICAgIH1lbHNlewogICAgICB0aGlzLnNlYXJjaFVzZXJzQnlFbWFpbCgpCiAgICB9CgoKCgoKCiAgICAgIC8vdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3VzZXIvc2V0TmV3RGF0YScsWzE0LDEwNCw3LDksMTBdKQogICAgfSwKCiAgICBhc3luYyBzZXRUaW1lVXNlckV2ZW50c0RvY3MoKSB7CgogICAgICBsZXQgdXNlcklkTGlzdD1bXQogICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCJ1c2VycyIpLmdldCgpLnRoZW4oZnVuY3Rpb24ocXVlcnlTbmFwc2hvdCkgewogICAgICBxdWVyeVNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24oZG9jKSB7CgogICAgICAgIHVzZXJJZExpc3QucHVzaChkb2MucmVmLmlkKQogICAgICB9KQogICAgICB9KQoKICAgICAgIGNvbnNvbGUubG9nKHVzZXJJZExpc3QpCgogICAgICBmb3IgKHZhciBsPTA7IGw8dXNlcklkTGlzdC5sZW5ndGg7IGwrKyl7CgogICAgICBkYi5jb2xsZWN0aW9uKCJ1c2VycyIpLmRvYyh1c2VySWRMaXN0W2xdKS5jb2xsZWN0aW9uKCdldmVudHMnKS5nZXQoKS50aGVuKGZ1bmN0aW9uKHF1ZXJ5U25hcHNob3QpIHsKICAgICAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uKGRvYykgewoKICAgICAgY29uc3Qgc3BsaXRUaW1lPWRvYy5yZWYuaWQuc3BsaXQoJyAnKVswXTsKICAgICAgY29uc29sZS5sb2coc3BsaXRUaW1lKQogICAgICB2YXIgcHVzaFRpbWUgPSBEYXRlLnBhcnNlKHNwbGl0VGltZSkKICAgICAgICBkb2MucmVmLnVwZGF0ZSh7CiAgICAgICAgICBjcmVhdGVkQXQ6IHB1c2hUaW1lCiAgICAgICAgfSk7CiAgICAgICAgY29uc29sZS5sb2cobW9tZW50KHB1c2hUaW1lKS5mb3JtYXQoJ01NTSBEbyBZWScpKQoKICAgICAgfSkKCiAgICAgIH0pCiAgICAgIH0KCiAgICB9LAoKICAgIHNldFRpbWVBbGxEb2NzKCl7CiAgICAgIGRiLmNvbGxlY3Rpb24oImFsYXJtIikuZ2V0KCkudGhlbihmdW5jdGlvbihxdWVyeVNuYXBzaG90KSB7CiAgICBxdWVyeVNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24oZG9jKSB7CiAgICAgIGNvbnN0IHNwbGl0VGltZT1kb2MucmVmLmlkLnNwbGl0KCcgJylbMF07CiAgICAgIGNvbnNvbGUubG9nKHNwbGl0VGltZSkKICAgICAgdmFyIHB1c2hUaW1lID0gRGF0ZS5wYXJzZShzcGxpdFRpbWUpCiAgICAgICAgZG9jLnJlZi51cGRhdGUoewogICAgICAgICAgY3JlYXRlZEF0OiBwdXNoVGltZQogICAgICAgIH0pOwogICAgICAgIGNvbnNvbGUubG9nKG1vbWVudChwdXNoVGltZSkuZm9ybWF0KCdNTU0gRG8gWVknKSkKICAgIH0pOwogICAgfSk7CiAgICB9LAoKCgogICAgYXN5bmMgZ2V0R3JvdXBEYXRhKGNhdGVnb3J5LCBmcm9tRGF0ZSl7CgogICAgICBjb25zdCBmdWxsRGF0ZTEgPSBEYXRlLnBhcnNlKHRoaXMuZGF0ZXNbMF0pCiAgICAgIGNvbnN0IGZ1bGxEYXRlMiA9IERhdGUucGFyc2UodGhpcy5kYXRlc1sxXSkKCiAgICAgIGlmICh0aGlzLmRhdGVzWzBdPT1udWxsKXsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGF0ZXNbMV09PW51bGwpewogICAgICAgIHRoaXMuZGF0ZXNbMV09dGhpcy5kYXRlc1swXQogICAgICB9CgogICAgICBjb25zdCB1c2VEYXRlcyA9IFtdCgoKICAgICAgaWYgKGZ1bGxEYXRlMSA8IGZ1bGxEYXRlMikgewogICAgICAgIHVzZURhdGVzLnB1c2goZnVsbERhdGUxKQogICAgICAgIHVzZURhdGVzLnB1c2goZnVsbERhdGUyKQogICAgICB9IGVsc2UgewogICAgICAgIHVzZURhdGVzLnB1c2goZnVsbERhdGUyKQogICAgICAgIHVzZURhdGVzLnB1c2goZnVsbERhdGUxKQogICAgICB9CiAgICAgIGNvbnNvbGUubG9nICh1c2VEYXRlcykKCiAgICAgIHRoaXMuYWxsU2VhcmNoRGF0ZXMgID0gdGhpcy5nZXREYXRlcyh1c2VEYXRlc1swXSwgdXNlRGF0ZXNbMV0pCgogICAgICBjb25zb2xlLmxvZyh1c2VEYXRlc1sxXSkKCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdxdWVyeXVzZXIvc2V0RGF0ZXMnLHRoaXMuYWxsU2VhcmNoRGF0ZXMgKQoKICAgICAgICBjb25zdCB0ZXN0Q29sbGVjdGlvbiA9IFtdCiAgICAgIC8vY29udGV4dC5jb21taXQoIlNFVF9NQVRDSEVTIiwgY2F0ZWdvcmllcykKCiAgICAgIGlmICghZnJvbURhdGUpewogICAgICAgIHZhciBlbmRUaGlzPWZhbHNlOwogICAgICBmb3IgKHZhciBiPXRoaXMuc2VuZE1hcERhdGEubGVuZ3RoLTE7IGI+PTA7IGItLSl7CiAgICAgICAgaWYgKHRoaXMuc2VuZE1hcERhdGFbYl1bJ2luZm9UZXh0J109PWNhdGVnb3J5KXsKICAgICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmUgaXQnKQogICAgICAgICAgZW5kVGhpcz10cnVlOwogICAgICAgICAgY29uc29sZS5sb2codGhpcy5zZW5kTWFwRGF0YVtiXSkKICAgICAgICAgIHRoaXMuc2VuZE1hcERhdGEuc3BsaWNlKGIsIDEpOwogICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3F1ZXJ5dXNlci9zZXROZXdNYXBEYXRhJyxPYmplY3QudmFsdWVzKHRoaXMuc2VuZE1hcERhdGEpKQogICAgICAgIH1lbHNlewogICAgICAgICAgY29uc29sZS5sb2coJ2FkZCBpdCcpCiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChlbmRUaGlzKXsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgfQoKICAgICAgYXdhaXQgZGIuY29sbGVjdGlvbihjYXRlZ29yeSkKICAgICAgICAub3JkZXJCeSgnY3JlYXRlZEF0Jykuc3RhcnRBdCh1c2VEYXRlc1swXSkuZW5kQXQodXNlRGF0ZXNbMV0pCiAgICAgICAgLy8gLndoZXJlKCdjcmVhdGVkQXQnCiAgICAgICAgLy8gICAsICc9PScsIERhdGUucGFyc2UoJzIwMjAtMTEtMTcgMDA6MDA6MDAuMDAwJykpCiAgICAgICAgLmdldCgpCiAgICAgICAgLnRoZW4oKHF1ZXJ5U25hcHNob3QpID0+IHsKICAgICAgICAgIGlmIChxdWVyeVNuYXBzaG90LmVtcHR5KSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZQogICAgICAgICAgICBjb25zb2xlLmxvZygnY2Fubm90IGZpbmQnKQogICAgICAgICAgICAvL3RoaXMuJHJvdXRlci5wdXNoKCcvSGVsbG9Xb3JsZCcpCiAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4gewogICAgICAgICAgICAgIGNvbnN0IGNvbGwgPSBbXQogICAgICAgICAgICAgIGNvbnN0IHsgaWQgfSA9IGRvYwogICAgICAgICAgICAgICBjb25zdCB1c2luZ0RhdGUgPSBtb21lbnQoaWQpLmZvcm1hdCgnTU1NIERvIFlZJykKCiAgICAgICAgICAgICAgZG9jLmRhdGEoKVsnZXZlbnRzJ10uZm9yRWFjaCgoZG9jKSA9PiB7CiAgICAgICAgICAgICAgICB2YXIgdGhlVGltZSA9IGRvYy50aW1lLnNlY29uZHMqMTAwMAogICAgICAgICAgICAgICAgdmFyIGFUaW1lID0gcGFyc2VJbnQgKG1vbWVudCh0aGVUaW1lKS5mb3JtYXQoJ0hIJykpCiAgICAgICAgICAgICAgICAvL3JlbW92ZWQgYWdlIGNoZWNrIGZvciBub3cKICAgICAgICAgICAgICAgIC8vaWYgKGRvYy5hZ2UgPj0gdGhpcy5sb3dlckFnZSAmJiBkb2MuYWdlIDw9IHRoaXMudXBwZXJBZ2UpewogICAgICAgICAgICAgICAgICBpZiAoYVRpbWUgPj0gdGhpcy50aW1lcmFuZ2VbMF0gJiYgYVRpbWUgPD0gdGhpcy50aW1lcmFuZ2VbMV0pewogICAgICAgICAgICAgICAgICAgIGNvbGwucHVzaCh7IGRvYyB9KQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL30KICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICB0ZXN0Q29sbGVjdGlvbi5wdXNoKHsgW3VzaW5nRGF0ZV06IGNvbGwgfSkKCiAgICAgICAgICAgIH0pCgogICAgICAgICAgICAvL3RoaXMuYWxsUmVzdWx0cyA9IHRlc3RDb2xsZWN0aW9uCiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgKHRoaXMuYWxsUmVzdWx0cykKICAgICAgICAgICAgLy90aGlzLmNyZWF0ZUFycmF5cygpCgogICAgICAgICAgfQoKICAgICAgICB9KQoKCgogICAgICBhd2FpdCB0aGlzLmZpbGxHcm91cENoYXJ0QXJyYXkodGVzdENvbGxlY3Rpb24sIGNhdGVnb3J5KQoKICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdxdWVyeXVzZXIvc2V0TmV3TWFwRGF0YScsT2JqZWN0LnZhbHVlcyh0aGlzLnNlbmRNYXBEYXRhKSkKCiAgICB9LAoKICAgIGFzeW5jIHNlYXJjaFVzZXJzQnlFbWFpbCgpIHsKICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlCiAgICAgIHRoaXMubWVzc2FnZSA9ICcnCiAgICAgIHRoaXMuZm91bmRVc2VyID0gbnVsbAoKICAgICAgdGhpcy5jaGFsbGVuZ2VMaXN0ID0gW10KICAgICAgdGhpcy5jaGFsbGVuZ2VTTVNMaXN0ID0gW10KICAgICAgdGhpcy5zZWNyZUxpc3QgPSBbXQogICAgICB0aGlzLnNlY3JlU01TTGlzdCA9IFtdCiAgICAgIHRoaXMudGltZXJMaXN0ID0gW10sCiAgICAgIHRoaXMudGltZXJTTVNMaXN0ID0gW10sCiAgICAgIHRoaXMudXNlclNNU0xpc3QgPSBbXSwKICAgICAgdGhpcy56b25lTGlzdCA9IFtdLAogICAgICB0aGlzLnpvbmVTTVNMaXN0ID0gW10sCiAgICAgIHRoaXMuYWxhcm1MaXN0ID0gW10KCiAgICAgIHZhciBuZXdOdW1iZXI7CiAgICAgIGlmICh0aGlzLmVtYWlsLnN1YnN0cmluZygwLDMpIT0nKzg4Jyl7CiAgICAgICAgbmV3TnVtYmVyID0gJys4OCcrdGhpcy5lbWFpbAogICAgICB9ZWxzZXsKICAgICAgICBuZXdOdW1iZXIgPSB0aGlzLmVtYWlsCiAgICAgIH0KCiAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIKICAgICAgICAuY29sbGVjdGlvbigndXNlcnMnKQogICAgICAgIC53aGVyZSgndXNlclBob25lJywgJz09JywgbmV3TnVtYmVyKQogICAgICAgIC5nZXQoKQoKICAgICAgaWYgKCFzbmFwc2hvdC5lbXB0eSkgewogICAgICAgIGNvbnN0IHVzZXJJZCA9IHNuYXBzaG90LmRvY3NbMF0uaWQKICAgICAgICBjb25zdCB1c2VyRGF0YSA9IHNuYXBzaG90LmRvY3NbMF0uZGF0YSgpCgogICAgICAgIHRoaXMuZm91bmRVc2VyID0gewogICAgICAgICAgaWQ6IHVzZXJJZCwKICAgICAgICAgIC4uLnVzZXJEYXRhCiAgICAgICAgfQoKICAgICAgICBjb25zdCBkYlVzZXIgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpLmdldCgpCgogICAgICAgIGlmIChkYlVzZXIgIT09IG51bGwpIHsKCiAgICAgICAgICBjb25zdCBxdWVyeVVzZXJEYXRhID0gZGJVc2VyLmRhdGEoKQoKICAgICAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdxdWVyeXVzZXIvc2V0VXNlckRhdGEnLCB7CiAgICAgICAgICAgIGlkOiBkYlVzZXIuaWQsCiAgICAgICAgICAgIG5hbWU6IHF1ZXJ5VXNlckRhdGEudXNlcm5hbWUsCiAgICAgICAgICAgIGVtYWlsOiBxdWVyeVVzZXJEYXRhLmVtYWlsCgogICAgICAgICAgfSkKCiAgICAgICAgICB0aGlzLnNlYXJjaFVzZXJBbmREYXRlKHVzZXJJZCkKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdOTyBVU0VSJykKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ05vIHVzZXIgd2l0aCB0aGF0IGVtYWlsIGZvdW5kLicKICAgICAgfQogICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlCiAgICB9LAoKICAgIGdldERhdGVzKHN0YXJ0RGF0ZSwgc3RvcERhdGUpIHsKICAgICAgdmFyIGRhdGVBcnJheSA9IFtdOwogICAgICB2YXIgY3VycmVudERhdGUgPSBtb21lbnQoc3RhcnREYXRlKTsKICAgICAgdmFyIHN0b3BEYXRlID0gbW9tZW50KHN0b3BEYXRlKTsKICAgICAgd2hpbGUgKGN1cnJlbnREYXRlIDw9IHN0b3BEYXRlKSB7CiAgICAgICAgICBkYXRlQXJyYXkucHVzaCggbW9tZW50KGN1cnJlbnREYXRlKS5mb3JtYXQoJ01NTSBEbyBZWScpICkKICAgICAgICAgIGN1cnJlbnREYXRlID0gbW9tZW50KGN1cnJlbnREYXRlKS5hZGQoMSwgJ2RheXMnKTsKICAgICAgfQogICAgICByZXR1cm4gZGF0ZUFycmF5OwogICAgfSwKICAgIGFzeW5jIHNlYXJjaFVzZXJBbmREYXRlKHVpZCkgewogICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZGF0ZXNbMF0gKyAnIDAwOjAwOjAwLjAwMCcpCgogICAgICBjb25zdCBmdWxsRGF0ZTEgPSBEYXRlLnBhcnNlKHRoaXMuZGF0ZXNbMF0pCiAgICAgIGNvbnN0IGZ1bGxEYXRlMiA9IERhdGUucGFyc2UodGhpcy5kYXRlc1sxXSkKCiAgICAgIGlmICh0aGlzLmRhdGVzWzBdPT1udWxsKXsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGF0ZXNbMV09PW51bGwpewogICAgICAgIHRoaXMuZGF0ZXNbMV09dGhpcy5kYXRlc1swXQogICAgICB9CgogICAgICBjb25zdCB1c2VEYXRlcyA9IFtdCgogICAgICBpZiAoZnVsbERhdGUxIDwgZnVsbERhdGUyKSB7CiAgICAgICAgdXNlRGF0ZXMucHVzaChmdWxsRGF0ZTEpCiAgICAgICAgdXNlRGF0ZXMucHVzaChmdWxsRGF0ZTIpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdXNlRGF0ZXMucHVzaChmdWxsRGF0ZTIpCiAgICAgICAgdXNlRGF0ZXMucHVzaChmdWxsRGF0ZTEpCiAgICAgIH0KICAgICAgY29uc29sZS5sb2cgKHVzZURhdGVzKQoKICAgICAgdGhpcy5hbGxTZWFyY2hEYXRlcyAgPSB0aGlzLmdldERhdGVzKHVzZURhdGVzWzBdLCB1c2VEYXRlc1sxXSkKCgogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgncXVlcnl1c2VyL3NldERhdGVzJyx0aGlzLmFsbFNlYXJjaERhdGVzICkKCgoKICAgICAgY29uc3QgdGVzdENvbGxlY3Rpb24gPSBbXQogICAgICAvL2NvbnRleHQuY29tbWl0KCJTRVRfTUFUQ0hFUyIsIGNhdGVnb3JpZXMpCgogICAgICBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1aWQpCiAgICAgICAgLmNvbGxlY3Rpb24oJ2V2ZW50cycpCiAgICAgICAgLm9yZGVyQnkoJ2NyZWF0ZWRBdCcpLnN0YXJ0QXQodXNlRGF0ZXNbMF0pLmVuZEF0KHVzZURhdGVzWzFdKQogICAgICAgIC8vIC53aGVyZSgnY3JlYXRlZEF0JwogICAgICAgIC8vICAgLCAnPT0nLCBEYXRlLnBhcnNlKCcyMDIwLTExLTE3IDAwOjAwOjAwLjAwMCcpKQogICAgICAgIC5nZXQoKQogICAgICAgIC50aGVuKChxdWVyeVNuYXBzaG90KSA9PiB7CiAgICAgICAgICBpZiAocXVlcnlTbmFwc2hvdC5lbXB0eSkgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nhbm5vdCBmaW5kJykKICAgICAgICAgICAgLy90aGlzLiRyb3V0ZXIucHVzaCgnL0hlbGxvV29ybGQnKQogICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7CiAgICAgICAgICAgICAgY29uc3QgY29sbCA9IFtdCiAgICAgICAgICAgICAgY29uc3QgeyBpZCB9ID0gZG9jCgogICAgICAgICAgICAgIGRvYy5kYXRhKClbJ2V2ZW50cyddLmZvckVhY2goKGRvYykgPT4gewogICAgICAgICAgICAgICAgdmFyIHRoZVRpbWUgPSBkb2MudGltZS5zZWNvbmRzKjEwMDAKICAgICAgICAgICAgICAgIHZhciBhVGltZSA9IHBhcnNlSW50IChtb21lbnQodGhlVGltZSkuZm9ybWF0KCdISCcpKQogICAgICAgICAgICAgICAgaWYgKGFUaW1lID49IHRoaXMudGltZXJhbmdlWzBdICYmIGFUaW1lIDw9IHRoaXMudGltZXJhbmdlWzFdKXsKICAgICAgICAgICAgICAgICAgY29sbC5wdXNoKHsgZG9jIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgdGVzdENvbGxlY3Rpb24ucHVzaCh7IFtpZF06IGNvbGwgfSkKCiAgICAgICAgICAgIH0pCgogICAgICAgICAgICB0aGlzLmFsbFJlc3VsdHMgPSB0ZXN0Q29sbGVjdGlvbgogICAgICAgICAgICB0aGlzLmNyZWF0ZUFycmF5cygpCiAgICAgICAgICB9CiAgICAgICAgfSkKCiAgICB9LAogICAgYXN5bmMgY3JlYXRlQXJyYXlzKCl7CgogICAgdGhpcy5hbGxSZXN1bHRzLmZvckVhY2goZG9jPT57CiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRvYykpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGBORVcgJHtrZXl9OiAke3ZhbHVlfWApCgogICAgICAgICAgICB2YXIgdGhlS2V5PWtleQoKICAgICAgICAgICAgZm9yIChjb25zdCBbYWtleSwgYXZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkb2NbdGhlS2V5XSkpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2FrZXl9OiAke2F2YWx1ZX1gKQogICAgICAgICAgICAgICAgY29uc3QgdXNpbmdEYXRlID0gbW9tZW50KGF2YWx1ZVsnZG9jJ11bJ3RpbWUnXS50b0RhdGUoKSkuZm9ybWF0KCdNTU0gRG8gWVknKQoKCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1c2luZ0RhdGUpOwoKICAgICAgICAgICAgICAgIHN3aXRjaCAoYXZhbHVlWydkb2MnXVsnY2F0ZWdvcnknXSkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYWxsZW5nZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbGxlbmdlTGlzdC5wdXNoKHsgW3VzaW5nRGF0ZV0gOmF2YWx1ZVsnZG9jJ119KQogICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMuY2hhbGxlbmdlTGlzdC5wdXNoKGF2YWx1ZVsnZG9jJ10pCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYWxsZW5nZS1zbXMnOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYWxsZW5nZVNNU0xpc3QucHVzaCh7IFt1c2luZ0RhdGVdIDphdmFsdWVbJ2RvYyddfSkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VjcmV0JzoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWNyZXRMaXN0LnB1c2goeyBbdXNpbmdEYXRlXSA6YXZhbHVlWydkb2MnXX0pCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlY3JldC1zbXMnOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY3JldFNNU0xpc3QucHVzaCh7IFt1c2luZ0RhdGVdIDphdmFsdWVbJ2RvYyddfSkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZXInOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVyTGlzdC5wdXNoKHsgW3VzaW5nRGF0ZV0gOmF2YWx1ZVsnZG9jJ119KQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICd0aW1lci1zbXMnOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVyU01TTGlzdC5wdXNoKHsgW3VzaW5nRGF0ZV0gOmF2YWx1ZVsnZG9jJ119KQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICd1c2VyLXNtcyc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXNlclNNU0xpc3QucHVzaCh7IFt1c2luZ0RhdGVdIDphdmFsdWVbJ2RvYyddfSkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnem9uZSc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuem9uZUxpc3QucHVzaCh7IFt1c2luZ0RhdGVdIDphdmFsdWVbJ2RvYyddfSkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnem9uZXMtc21zJzoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56b25lU01TTGlzdC5wdXNoKHsgW3VzaW5nRGF0ZV0gOmF2YWx1ZVsnZG9jJ119KQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlICdhbGFybSc6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxhcm1MaXN0LnB1c2goeyBbdXNpbmdEYXRlXSA6YXZhbHVlWydkb2MnXX0pCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgfSkKCiAgICB0aGlzLnNlbGVjdENoYXJ0Q29sdW1ucygpCgogIH0sCgogIGFzeW5jIHNlbGVjdENoYXJ0Q29sdW1ucygpewoKCiAgICB0aGlzLnNlbmRNYXBEYXRhPVtdCgogICAgY29uc29sZS5sb2codGhpcy5hbGFybUxpc3QpCgogaWYgKHRoaXMuY2hhbGxlbmdlTGlzdC5sZW5ndGg+MCAmJiB0aGlzLmNoYWxsZW5nZUNoZWNrKXsKICAgICAgYXdhaXQgdGhpcy5maWxsQ2hhcnRBcnJheSh0aGlzLmNoYWxsZW5nZUxpc3QsICdDaGFsbGVuZ2UnKQogICAgfQoKICAgIGlmICh0aGlzLmNoYWxsZW5nZVNNU0xpc3QubGVuZ3RoPjAgJiYgdGhpcy5jaGFsbGVuZ2VTTVNDaGVjayl7CiAgICAgIGF3YWl0IHRoaXMuZmlsbENoYXJ0QXJyYXkodGhpcy5jaGFsbGVuZ2VTTVNMaXN0LCAnQ2hhbGxlbmdlIFNNUycpCiAgICB9CgogICAgaWYgKHRoaXMuc2VjcmV0TGlzdC5sZW5ndGg+MCAmJiB0aGlzLnNlY3JldENoZWNrKXsKICAgICAgYXdhaXQgdGhpcy5maWxsQ2hhcnRBcnJheSh0aGlzLnNlY3JldExpc3QsICdTZWNyZXQnKQogICAgfQoKICAgIGlmICh0aGlzLnNlY3JldFNNU0xpc3QubGVuZ3RoPjAgJiYgdGhpcy5zZWNyZXRTTVNDaGVjayl7CiAgICAgIGF3YWl0IHRoaXMuZmlsbENoYXJ0QXJyYXkodGhpcy5zZWNyZXRTTVNMaXN0LCAnU2VjcmV0IFNNUycpCiAgICB9CgogICAgaWYgKHRoaXMudGltZXJMaXN0Lmxlbmd0aD4wICYmIHRoaXMudGltZXJDaGVjayl7CiAgICAgIGF3YWl0IHRoaXMuZmlsbENoYXJ0QXJyYXkodGhpcy50aW1lckxpc3QsICdUaW1lcicpCiAgICB9CgogICAgaWYgKHRoaXMudGltZXJTTVNMaXN0Lmxlbmd0aD4wICYmIHRoaXMudGltZXJTTVNDaGVjayl7CiAgICAgIGF3YWl0IHRoaXMuZmlsbENoYXJ0QXJyYXkodGhpcy50aW1lclNNU0xpc3QsICdUaW1lciBTTVMnKQogICAgfQoKICAgIGlmICh0aGlzLnpvbmVMaXN0Lmxlbmd0aD4wICYmIHRoaXMuem9uZUNoZWNrKXsKICAgICAgYXdhaXQgdGhpcy5maWxsQ2hhcnRBcnJheSh0aGlzLnpvbmVMaXN0LCAnWm9uZScpCiAgICB9CgogICAgaWYgKHRoaXMuem9uZVNNU0xpc3QubGVuZ3RoPjAgJiYgdGhpcy4gem9uZVNNU0NoZWNrKXsKICAgICAgYXdhaXQgdGhpcy5maWxsQ2hhcnRBcnJheSh0aGlzLnpvbmVTTVNMaXN0LCAnWm9uZSBTTVMnKQogICAgfQoKICAgIGlmICh0aGlzLnVzZXJTTVNMaXN0Lmxlbmd0aD4wICYmIHRoaXMudXNlclNNU0NoZWNrKXsKICAgICAgYXdhaXQgdGhpcy5maWxsQ2hhcnRBcnJheSh0aGlzLnVzZXJTTVNMaXN0LCAnVXNlciBTTVMnKQogICAgfQoKICAgIGlmICh0aGlzLmFsYXJtTGlzdC5sZW5ndGg+MCAmJiB0aGlzLmFsYXJtQ2hlY2spewogICAgICBhd2FpdCB0aGlzLmZpbGxDaGFydEFycmF5KHRoaXMuYWxhcm1MaXN0LCAnQWxhcm0nKQogICAgfQoKICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgncXVlcnl1c2VyL3NldE5ld01hcERhdGEnLE9iamVjdC52YWx1ZXModGhpcy5zZW5kTWFwRGF0YSkpCgogIH0sCgogIGFzeW5jIGZpbGxDaGFydEFycmF5KGNyZWF0ZWRMaXN0LCBjYXRlZ29yeSl7CgogICAgdmFyIHRhYnVsYXRlZExpc3QgPSB7fQoKICAgIGZvciAodmFyIHQ9MDsgdDx0aGlzLmFsbFNlYXJjaERhdGVzLmxlbmd0aDsgdCsrKXsKICAgICAgT2JqZWN0LmFzc2lnbih0YWJ1bGF0ZWRMaXN0LCB7W3RoaXMuYWxsU2VhcmNoRGF0ZXNbdF1dOiAwfSk7CiAgICB9CgogICAgZm9yICh2YXIgaT0wOyBpPGNyZWF0ZWRMaXN0Lmxlbmd0aDsgaSsrKXsKICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNyZWF0ZWRMaXN0W2ldKSkgewogICAgICAgICAgY29uc29sZS5sb2coYE5FVyAke2tleX06ICR7dmFsdWV9YCkKICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlLmxvY2F0aW9uLmxhdGl0dWRlKQogICAgICAgICAgdmFyIGxhdCA9IHZhbHVlLmxvY2F0aW9uLmxhdGl0dWRlCiAgICAgICAgICB2YXIgbG9uZyA9IHZhbHVlLmxvY2F0aW9uLmxvbmdpdHVkZQogICAgICAgICAgdmFyIGluZm8gPSB2YWx1ZS5jYXRlZ29yeQogICAgICAgICAgdmFyIHVzZUljb24gPSB0aGlzLm1hcEljb25zW3ZhbHVlLmNhdGVnb3J5XQogICAgICAgICAgY29uc29sZS5sb2coJ01QUFBQICcrdXNlSWNvbikKCiAgICAgICAgICAgIHRoaXMuc2VuZE1hcERhdGEucHVzaCgKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogewogICAgICAgICAgICAgICAgICBsYXQ6IGxhdCwKICAgICAgICAgICAgICAgIGxuZzogbG9uZwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGluZm9UZXh0OiBpbmZvLAogICAgICAgICAgICAgICAgaWNvbjogdXNlSWNvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICkKICAgICAgICB9CiAgICB9CgogIGNvbnNvbGUubG9nKHRhYnVsYXRlZExpc3QpCgogICAgLy9hd2FpdCB0aGlzLnNlbmRNYXBEYXRhLnB1c2goe25hbWU6IGNhdGVnb3J5LCBkYXRhOiBPYmplY3QudmFsdWVzKHRhYnVsYXRlZExpc3QpfSkKCiAgICByZXR1cm4KICB9LAoKICBhc3luYyBmaWxsR3JvdXBDaGFydEFycmF5KGNyZWF0ZWRMaXN0LCBjYXRlZ29yeSl7CgogICAgdmFyIHRhYnVsYXRlZExpc3QgPSB7fQogICAgdmFyIGZvck1hcD17fQoKICAgIGZvciAodmFyIHQ9MDsgdDx0aGlzLmFsbFNlYXJjaERhdGVzLmxlbmd0aDsgdCsrKXsKICAgICAgT2JqZWN0LmFzc2lnbih0YWJ1bGF0ZWRMaXN0LCB7W3RoaXMuYWxsU2VhcmNoRGF0ZXNbdF1dOiAwfSk7CiAgICB9CgogICAgZm9yICh2YXIgaT0wOyBpPGNyZWF0ZWRMaXN0Lmxlbmd0aDsgaSsrKXsKICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNyZWF0ZWRMaXN0W2ldKSkgewogICAgICAgICAgY29uc29sZS5sb2coYE5FVyAke2tleX06ICR7dmFsdWV9YCkKCiAgICAgICAgICB0YWJ1bGF0ZWRMaXN0W2tleV0gPSB2YWx1ZS5sZW5ndGgKCiAgICAgICAgICAvL2dldCB2YWx1ZXMgYmVsb3cgZS5nLiBtYXAgbG9jYXRpb25zCgogICAgICAgICAgZm9yICh2YXIgdj0wOyB2PHZhbHVlLmxlbmd0aDsgdisrKXsKICAgICAgICAgICAgdmFyIGdlbyA9IHZhbHVlW3ZdWydkb2MnXVsnbG9jYXRpb24nXQogICAgICAgICAgICB2YXIgbGF0ID0gZ2VvLmxhdGl0dWRlCiAgICAgICAgICAgIHZhciBsb25nID0gZ2VvLmxvbmdpdHVkZQogICAgICAgICAgICB2YXIgaW5mbyA9IHZhbHVlW3ZdWydkb2MnXVsnY2F0ZWdvcnknXQoKICAgICAgICAgICAgdmFyIHVzZUljb24gPSB0aGlzLm1hcEljb25zW3ZhbHVlW3ZdWydkb2MnXVsnY2F0ZWdvcnknXV0KCiAgICAgICAgICAgIHRoaXMuc2VuZE1hcERhdGEucHVzaCgKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogewogICAgICAgICAgICAgICAgICBsYXQ6IGxhdCwKICAgICAgICAgICAgICAgIGxuZzogbG9uZwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGluZm9UZXh0OiBpbmZvLAogICAgICAgICAgICAgICBpY29uIDogdXNlSWNvbgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICkKICAgICAgICAgICAgLy9jb25zb2xlLmxvZyAoZ2VvLmxhdGl0dWRlKQogICAgICAgICAgfQoKICAgICAgICB9CiAgICB9CgogIC8vY29uc29sZS5sb2codGFidWxhdGVkTGlzdCkKCiAgIC8vIGF3YWl0IHRoaXMuc2VuZE1hcERhdGEucHVzaCh7bmFtZTogY2F0ZWdvcnksIGRhdGE6IE9iamVjdC52YWx1ZXModGFidWxhdGVkTGlzdCl9KQoKICAgIHJldHVybgogIH0KCgoKICB9Cn0K"},null]}